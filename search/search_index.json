{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"openligadb"},{"location":"/index.html#openligadb","text":"This project is an Scala implementation for the OpenligaDb API. At this point the documentation is not completed. When you can not find informaitons about the request you are interested in, take a look at the tests. At this Point there is an test for every implemented API request.","title":"openligadb"},{"location":"/index.html#what-is-openligadb","text":"OpenligaDB is an communitybased Sports API.","title":"What is OpenligaDB"},{"location":"/index.html#build-status","text":"","title":"Build Status"},{"location":"/index.html#quick-start","text":"Add to build.sbt the following content:\nlibraryDependencies += \"com.quadstingray\" % \"openligadb\" % \"0.7.4\"","title":"Quick start"},{"location":"/index.html#contributing","text":"If you find this project helpfull, so you can see here how you can help: - Send a pull request with your features and bug fixes - Help users resolve their issues.","title":"Contributing"},{"location":"/index.html#maven","text":"sbt-javafx is deployed on bintray (jcenter).","title":"maven"},{"location":"/index.html#licence","text":"Apache 2 License.","title":"Licence"},{"location":"/index.html#todos-","text":"documentation","title":"Todos:"},{"location":"/first-steps.html","text":"","title":"First Steps"},{"location":"/first-steps.html#first-steps","text":"Add to build.sbt the following content:\nlibraryDependencies += \"com.quadstingray\" % \"openligadb\" % \"0.7.4\"\nThe first thing you need is the Id for the league you are interested in. How you can find the id? Take a look here.. We take bl1 (German Bundesliga) for our sample.\nSo lets make some basic request!","title":"First Steps"},{"location":"/first-steps.html#get-the-current-season","text":"val league = League(\"bl1\")\n\nval season = league.currentSeason","title":"Get the Current Season"},{"location":"/first-steps.html#get-the-specific-season","text":"val league = League(\"bl1\")\n\nval season = league.currentSeason","title":"Get the specific Season"},{"location":"/first-steps.html#get-the-current-matches","text":"Note The current day is increased in each case half the time between the last game of the last match day and the first game of the next match day.\nval league = League(\"bl1\")\n\nval matches = league.currentMatches","title":"Get the current Matches"},{"location":"/first-steps.html#get-next-matches","text":"val league = League(\"bl1\")\n\nval openLigaMatchOption: Option[MatchData] = league.nextMatch","title":"Get next Matches"},{"location":"/league/find-league.html","text":"","title":"How to find your league"},{"location":"/league/find-league.html#how-to-find-your-league","text":"","title":"How to find your league"},{"location":"/league/find-league.html#via-api","text":"The API Call returns an List of League\nval league = OpenligaDb.availableLeagues","title":"Via API"},{"location":"/league/find-league.html#via-webinterface","text":"Check OpenligaDB Website Find your sport and take Liga-Shortcut as shortName to init League(shortName)","title":"Via Webinterface"},{"location":"/tests/index.html","text":"","title":"Tests"},{"location":"/tests/index.html#tests","text":"openligadb-service-spec sport-spec league-spec season-spec match-group-spec match-data-spec team-spec","title":"Tests"},{"location":"/tests/openligadb-service-spec.html","text":"","title":"OpenligaService"},{"location":"/tests/openligadb-service-spec.html#openligaservice","text":"package com.quadstingray.openligadb\n\nclass OpenligaServiceSpec extends org.specs2.mutable.Specification {\n\n  \"OpenligaService\" >> {\n\n    \"getAllAvailableLeagues\" >> {\n\n      val league = OpenligaDb.availableLeagues\n\n      league.size must beGreaterThan(200)\n\n      val bl1 = league.filter(league => \"bl1\".equalsIgnoreCase(league.shortName))\n\n      bl1.size must beEqualTo(1)\n    }\n\n    \"getAllAvailableSeasons \" >> {\n      val seasons = OpenligaDb.availableSeasons\n\n      seasons.size must beGreaterThan(200)\n\n      val bl1 = seasons.filter(season => \"bl1\".equalsIgnoreCase(season.league.shortName) && 2016 == season.year)\n\n      bl1.size must beEqualTo(1)\n    }\n\n    \"getAllAvailableSports \" >> {\n      val sports = OpenligaDb.availableSports\n\n      sports.size must beGreaterThan(10)\n\n      val soccer = sports.head\n\n      soccer.id must beEqualTo(1)\n\n      soccer.name must beEqualTo(\"Fußball\")\n    }\n\n  }\n\n\n}","title":"OpenligaService"},{"location":"/tests/sport-spec.html","text":"","title":"Sport"},{"location":"/tests/sport-spec.html#sport","text":"package com.quadstingray.openligadb\n\nimport com.quadstingray.openligadb.exceptions.NoSportFoundException\n\nclass SportSpec extends org.specs2.mutable.Specification {\n\n  \"Sport\" >> {\n\n    \"apply with id 1\" >> {\n\n      val sport = Sport(1)\n\n      sport.name must beEqualTo(\"Fußball\")\n\n    }\n\n    \"apply with id 12345678912345678 NoSeasonFoundException\" >> {\n\n      var errorCatched = false\n\n      try {\n        val season = Sport(12345678912345678L)\n      } catch {\n        case e: NoSportFoundException =>\n          errorCatched = true\n      }\n\n      errorCatched must beTrue\n\n    }\n\n    \"getLeagues\" >> {\n\n      val sport = Sport(1, \"Was auch immer\")\n\n      sport.name must beEqualTo(\"Was auch immer\")\n\n      val leagues = sport.leagues\n\n      leagues.size must beGreaterThanOrEqualTo(241)\n    }\n\n    \"getSeasons\" >> {\n\n      val sport = Sport(1, \"Was auch immer\")\n\n      sport.name must beEqualTo(\"Was auch immer\")\n\n      val seasons = sport.seasons\n\n      seasons.size must beGreaterThanOrEqualTo(311)\n    }\n\n  }\n\n\n}","title":"Sport"},{"location":"/tests/league-spec.html","text":"","title":"League"},{"location":"/tests/league-spec.html#league","text":"package com.quadstingray.openligadb\n\nimport org.joda.time.DateTime\n\n\nclass LeagueSpec extends org.specs2.mutable.Specification {\n\n  \"League\" >> {\n\n    \"getCurrentMatches must return List of 9 elements for bl1\" >> {\n\n      val league = League(\"bl1\")\n\n      val matches = league.currentMatches\n\n      matches.size must equalTo(9)\n    }\n\n    \"getCurrentSeason \" >> {\n\n      val league = League(\"bl1\")\n\n      val season = league.currentSeason\n\n      val currentYear = new DateTime().getYear\n\n      season.year must beBetween(currentYear - 1, currentYear + 1)\n\n      season.league must beEqualTo(league)\n\n    }\n\n\n    \"getSeason \" >> {\n      val league = League(\"bl1\")\n\n      val season = league.season(2015)\n\n      season.year must beEqualTo(2015)\n\n      season.id must beEqualTo(848)\n\n      season.league must beEqualTo(league)\n\n    }\n\n    \"getSeasons \" >> {\n\n      val league = League(\"bl1\")\n\n      val seasons = league.seasons\n\n      seasons.size must beGreaterThanOrEqualTo(16)\n\n    }\n\n    \"getCurrentMatchGroup \" >> {\n\n      val league = League(\"bl1\")\n\n      val matchGroup = league.currentMatchGroup\n\n      matchGroup.id must beGreaterThanOrEqualTo(28957l)\n\n      matchGroup.matchGroupOrderNumber must beGreaterThanOrEqualTo(1)\n\n      matchGroup.name must beEqualTo(\"%s. Spieltag\".format(matchGroup.matchGroupOrderNumber))\n\n    }\n\n    \"lastMatch \" >> {\n\n      val league = League(\"cl15\")\n\n      val openLigaMatch = league.lastMatch.get\n\n      openLigaMatch.id must beGreaterThan(100l)\n\n      openLigaMatch.finalResult.isDefined must beTrue\n\n      openLigaMatch.finalResult.get.name must beEqualTo(\"Endergebnis\")\n\n      openLigaMatch.finalResult.get.scoreTeam1 must beGreaterThanOrEqualTo(2)\n\n      openLigaMatch.finalResult.get.scoreTeam2 must beGreaterThanOrEqualTo(1)\n\n    }\n\n    \"nextMatch \" >> {\n\n      val league = League(\"bl1\")\n\n      val openLigaMatchOption: Option[MatchData] = league.nextMatch\n\n      if (openLigaMatchOption.isDefined) {\n        val openLigaMatch = openLigaMatchOption.get\n        openLigaMatch.id must beGreaterThanOrEqualTo(28957l)\n      } else {\n        league.currentMatchGroup.matchGroupOrderNumber must beEqualTo(34)\n      }\n\n    }\n\n    \"nextMatch where no next match exists\" >> {\n\n      val league = League(\"wm14\")\n\n      val openLigaMatch = league.nextMatch\n\n      openLigaMatch must beNone\n\n    }\n\n    \"lastMatch where no next match exists\" >> {\n\n      val league = League(\"WMTipp18_1\")\n\n      val openLigaMatch = league.lastMatch\n\n      openLigaMatch must beNone\n\n    }\n\n    \"matches between 02.03.2017 11:30 - 04.03.2017 10:00 \" >> {\n\n      val league = League(\"bl1\")\n\n      val startDate: DateTime = new DateTime(\"2017-03-02T11:30Z\")\n      val endDate: DateTime = new DateTime(\"2017-04-04T11:30Z\")\n\n      val openLigaMatch = league.matchesBetween(startDate, endDate)\n\n      openLigaMatch.size must beGreaterThanOrEqualTo(36)\n    }\n  }\n\n\n}","title":"League"},{"location":"/tests/season-spec.html","text":"","title":"Season"},{"location":"/tests/season-spec.html#season","text":"package com.quadstingray.openligadb\n\nimport com.quadstingray.openligadb.exceptions.NoSeasonFoundException\nimport org.joda.time.DateTime\n\nclass SeasonSpec extends org.specs2.mutable.Specification {\n\n  \"Season\" >> {\n\n    \"apply with id 3005\" >> {\n\n      val season = Season(3005)\n\n      season.year must beEqualTo(2016)\n\n      season.name must beEqualTo(\"1. Fußball-Bundesliga 2016/2017\")\n\n      season.id must beEqualTo(3005l)\n\n    }\n\n    \"apply with id 12345678912345678 NoSeasonFoundException\" >> {\n\n      var errorCatched = false\n\n      try {\n        val season = Season(12345678912345678L)\n      } catch {\n        case e: NoSeasonFoundException =>\n          errorCatched = true\n      }\n\n      errorCatched must beTrue\n\n    }\n\n    \"apply with shortName bl1 and year 2015 NoSeasonFoundException\" >> {\n\n      var errorCatched = false\n\n      try {\n        val season = Season(\"bl1\", 2099)\n      } catch {\n        case e: NoSeasonFoundException =>\n          errorCatched = true\n      }\n\n      errorCatched must beTrue\n\n    }\n\n    \"apply with shortName bl1 and year 2015\" >> {\n\n      val season = Season(\"bl1\", 2015)\n\n      season.year must beEqualTo(2015)\n\n      season.name must beEqualTo(\"1. Fußball-Bundesliga 2015/2016\")\n\n      season.id must beEqualTo(848l)\n\n      season.lastChangeDate must beEqualTo(new DateTime(\"2016-05-18T16:22:40.253\"))\n\n    }\n\n    \"getMatchGroups\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      season.year must beEqualTo(2015)\n\n      season.name must beEqualTo(\"Was auch immer fuer ein Name\")\n\n      season.id must beEqualTo(848l)\n\n      val matchGroups = season.matchGroups\n\n      matchGroups.size must beEqualTo(34)\n\n      val matchDay1 = matchGroups.head\n\n      matchDay1.id must beEqualTo(17750)\n\n      matchDay1.name must beEqualTo(\"1. Spieltag\")\n\n      matchDay1.matchGroupOrderNumber must beEqualTo(1)\n\n    }\n\n    \"old season get current matchgroup\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      val matchGroup = season.currentMatchGroup\n\n      matchGroup.season must beEqualTo(season)\n\n      matchGroup.matchGroupOrderNumber must beEqualTo(34)\n    }\n\n    \"current bl season get current matchgroup\" >> {\n\n      val league = League(\"bl1\")\n\n      val matchGroup = league.currentSeason.currentMatchGroup\n\n      matchGroup.matchGroupOrderNumber must between(1, 34)\n\n      matchGroup must beEqualTo(league.currentMatchGroup)\n    }\n\n    \"getAllMatches\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      season.year must beEqualTo(2015)\n\n      season.name must beEqualTo(\"Was auch immer fuer ein Name\")\n\n      season.id must beEqualTo(848l)\n\n      val matches = season.allMatches\n\n      matches.size must beEqualTo(306)\n\n      val match1 = matches.head\n\n      match1.id must beEqualTo(33236)\n\n      match1.team1.shortname must beEqualTo(\"FCB\")\n\n      match1.team2.shortname must beEqualTo(\"HSV\")\n\n      match1.finalResult.isDefined must beTrue\n\n      val finalResult = match1.finalResult.get\n\n      finalResult.scoreTeam1 must beEqualTo(5)\n\n      finalResult.scoreTeam2 must beEqualTo(0)\n    }\n\n    \"getTeams\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      season.year must beEqualTo(2015)\n\n      season.name must beEqualTo(\"Was auch immer fuer ein Name\")\n\n      season.id must beEqualTo(848l)\n\n      val teams = season.teams\n\n      teams.size must beEqualTo(18)\n\n      val fcb = teams.filter(team => team.id == 40).head\n\n      fcb.id must beEqualTo(40)\n\n      fcb.name must beEqualTo(\"FC Bayern\")\n\n      fcb.shortname must beEqualTo(\"FCB\")\n\n      fcb.iconUrl.contains(\"FC_Bayern_M\") must beTrue\n\n      fcb.iconUrl.contains(\"Logo\") must beTrue\n\n      fcb.iconUrl.contains(\".png\") must beTrue\n\n    }\n\n    \"getGoalGetters\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      season.year must beEqualTo(2015)\n\n      season.name must beEqualTo(\"Was auch immer fuer ein Name\")\n\n      season.id must beEqualTo(848l)\n\n      val goalGetters = season.goalGetters\n\n      goalGetters.size must beEqualTo(290)\n\n      val lewy = goalGetters.filter(goalGetter => goalGetter.player.id == 1478).head\n\n      lewy.player.id must beEqualTo(1478)\n\n      lewy.player.name must beEqualTo(\"Lewandowski\")\n\n      lewy.player.nationality must beNone\n\n      lewy.goalCount must beEqualTo(28)\n\n    }\n\n    \"getAllGoals\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      val allGoals = season.allGoals\n\n      allGoals.size must beEqualTo(869)\n\n      val fistGoalOfSeason = allGoals.head\n\n      fistGoalOfSeason.player.name must beEqualTo(\"Benatia, Medhi\")\n\n\n\n    }\n\n    \"get current table\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      val table: List[TableElement] = season.currentTable\n\n      table.size must beEqualTo(18)\n\n      val seasonWinner = table.head\n\n      val winningTeamId = seasonWinner.team.id\n\n      //      Team(winningTeamId) must beEqualTo(seasonWinner.team)\n\n      seasonWinner.team.name must beEqualTo(\"FC Bayern\")\n\n      seasonWinner.countMatches must beEqualTo(34)\n\n      seasonWinner.win must beEqualTo(28)\n\n      seasonWinner.draw must beEqualTo(4)\n\n      seasonWinner.defeat must beEqualTo(2)\n\n      seasonWinner.goals must beEqualTo(80)\n\n      seasonWinner.opponentGoals must beEqualTo(17)\n\n      seasonWinner.goalDiff must beEqualTo(63)\n\n      seasonWinner.points must beEqualTo(88)\n\n      val seasonLast = table.last\n\n      seasonLast.team.name must beEqualTo(\"Hannover 96\")\n\n      seasonLast.countMatches must beEqualTo(34)\n\n      seasonLast.win must beEqualTo(7)\n\n      seasonLast.draw must beEqualTo(4)\n\n      seasonLast.defeat must beEqualTo(23)\n\n      seasonLast.goals must beEqualTo(31)\n\n      seasonLast.opponentGoals must beEqualTo(62)\n\n      seasonLast.goalDiff must beEqualTo(-31)\n\n      seasonLast.points must beEqualTo(25)\n\n    }\n  }\n\n\n}","title":"Season"},{"location":"/tests/match-group-spec.html","text":"","title":"MatchGroup"},{"location":"/tests/match-group-spec.html#matchgroup","text":"package com.quadstingray.openligadb\n\nimport com.quadstingray.openligadb.exceptions.NoMatchGroupFoundException\nimport org.joda.time.DateTime\n\nclass MatchGroupSpec extends org.specs2.mutable.Specification {\n\n  \"MatchGroup\" >> {\n\n\n    \"apply with id 12345678912345678 NoMatchGroupFoundException\" >> {\n\n      var errorCatched = false\n\n      try {\n        val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n        val matchDay = MatchGroup(12345678912345678L, season)\n      } catch {\n        case e: NoMatchGroupFoundException =>\n          errorCatched = true\n      }\n\n      errorCatched must beTrue\n\n    }\n\n    \"apply with matchgrouporderid 40 NoMatchGroupFoundException\" >> {\n\n      var errorCatched = false\n\n      try {\n        val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n        val matchDay = MatchGroup(season, 40)\n      } catch {\n        case e: NoMatchGroupFoundException =>\n          errorCatched = true\n      }\n\n      errorCatched must beTrue\n\n    }\n\n    \"apply with id 17757\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      val matchDay = MatchGroup(17757, season)\n\n      matchDay.id must beEqualTo(17757l)\n\n      matchDay.matchGroupOrderNumber must beEqualTo(8)\n\n      matchDay.name must beEqualTo(\"8. Spieltag\")\n\n      matchDay.lastChangeDate must beEqualTo(new DateTime(\"2015-10-04T19:22:40.440\"))\n\n    }\n\n    \"apply with shortName bl1 and year 2015\" >> {\n\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      val matchDay = MatchGroup(season, 9)\n\n      matchDay.id must beEqualTo(17758l)\n\n      matchDay.matchGroupOrderNumber must beEqualTo(9)\n\n      matchDay.name must beEqualTo(\"9. Spieltag\")\n\n    }\n\n    \"getMatches\" >> {\n      val season = Season(848, League(\"bl1\"), 2015, \"Was auch immer fuer ein Name\")\n\n      val matchGroup = MatchGroup(17758, season, \"Unbekannter Name\", 9)\n\n      val matches = matchGroup.matches\n\n      matches.size must beEqualTo(9)\n\n      val game = matches.head\n\n      game.team1.name must beEqualTo(\"1. FSV Mainz 05\")\n\n      game.team2.shortname must beEqualTo(\"BVB\")\n\n      game.finalResult.get.scoreTeam1 must beEqualTo(0)\n\n      game.finalResult.get.scoreTeam2 must beEqualTo(2)\n\n    }\n\n  }\n\n\n}","title":"MatchGroup"},{"location":"/tests/match-data-spec.html","text":"","title":"MatchData"},{"location":"/tests/match-data-spec.html#matchdata","text":"package com.quadstingray.openligadb\n\nimport com.quadstingray.openligadb.exceptions.NoMatchDataFoundException\nimport org.joda.time.DateTime\n\n\nclass MatchDataSpec extends org.specs2.mutable.Specification {\n\n  \"Match\" >> {\n\n    \"apply with id 39738\" >> {\n\n      val game = MatchData(39738)\n\n      game.id must beEqualTo(39738)\n\n      game.matchDateTime must beEqualTo(new DateTime(\"2016-11-19T17:30:00Z\"))\n\n      game.isFinished must beTrue\n\n      game.goals.size must beEqualTo(1)\n\n      val goalForTest = game.goals.head\n\n      goalForTest.matchData must beEqualTo(game)\n\n      goalForTest.matchMinute.get must beEqualTo(11)\n\n      goalForTest.id must beEqualTo(55579)\n\n      goalForTest.isOvertime.get must beFalse\n\n      goalForTest.isOwnGoal.get must beFalse\n\n      goalForTest.isPenalty.get must beFalse\n\n      goalForTest.scoreTeam1 must beEqualTo(1)\n\n      goalForTest.scoreTeam2 must beEqualTo(0)\n\n      goalForTest.player.id must beEqualTo(16033)\n\n      goalForTest.player.nationality must beNone\n\n      goalForTest.player.name must beEqualTo(\"Pierre-Emerick Aubameyang\")\n\n      game.matchGroup.id must beEqualTo(23843)\n\n      game.matchGroup.name must beEqualTo(\"11. Spieltag\")\n\n      game.matchGroup.matchGroupOrderNumber must beEqualTo(11)\n\n      game.lastUpdateDateTime must beEqualTo(new DateTime(\"2016-11-24T19:57:28.54\"))\n\n      game.matchGroup.season.id must beEqualTo(3005)\n\n      game.matchGroup.season.name must beEqualTo(\"1. Fußball-Bundesliga 2016/2017\")\n\n      game.location.get.id must beEqualTo(184)\n\n      game.location.get.city must beEqualTo(\"Dortmund\")\n\n      game.location.get.stadium must beEqualTo(\"Signal-Iduna-Park\")\n\n      game.matchDateTime must beEqualTo(new DateTime(\"2016-11-19T17:30:00Z\"))\n\n      game.finalResult.get.scoreTeam1 must beEqualTo(1)\n\n      game.finalResult.get.scoreTeam2 must beEqualTo(0)\n\n      game.matchResults.size must beEqualTo(2)\n\n      val halfTimeResult = game.matchResults.head\n\n      halfTimeResult.matchData must beEqualTo(game)\n\n      halfTimeResult.id must beEqualTo(70293)\n\n      halfTimeResult.resultOrderID must beEqualTo(1)\n\n      halfTimeResult.typeId must beEqualTo(1)\n\n      halfTimeResult.scoreTeam1 must beEqualTo(1)\n\n      halfTimeResult.scoreTeam2 must beEqualTo(0)\n\n      halfTimeResult.description must beEqualTo(\"Ergebnis zur Halbzeit\")\n\n      halfTimeResult.name must beEqualTo(\"Halbzeitergebnis\")\n\n      game.numberOfViewers.get must beEqualTo(81360)\n\n      game.team1.id must beEqualTo(7)\n\n      game.team1.shortname must beEqualTo(\"BVB\")\n\n      game.team1.iconUrl.contains(\"Borussia_Dortmund_logo\") must beTrue\n\n      game.team1.iconUrl.contains(\".png\") must beTrue\n\n      game.team1.name must beEqualTo(\"Borussia Dortmund\")\n\n      game.team2.id must beEqualTo(40)\n\n      game.team2.name must beEqualTo(\"FC Bayern\")\n\n      game.team2.shortname must beEqualTo(\"FCB\")\n\n      game.team2.iconUrl.contains(\"FC_Bayern_M\") must beTrue\n\n      game.team2.iconUrl.contains(\"Logo\") must beTrue\n\n      game.team2.iconUrl.contains(\".png\") must beTrue\n    }\n\n    \"apply with id 12345678912345678 NoMatchDataFoundException\" >> {\n\n      var errorCatched = false\n\n      try {\n        val season = MatchData(12345678912345678L)\n      } catch {\n        case e: NoMatchDataFoundException =>\n          errorCatched = true\n      }\n\n      errorCatched must beTrue\n\n    }\n\n  }\n\n\n}","title":"MatchData"},{"location":"/tests/team-spec.html","text":"","title":"Team"},{"location":"/tests/team-spec.html#team","text":"package com.quadstingray.openligadb\n\n\nclass TeamSpec extends org.specs2.mutable.Specification {\n\n  \"Team\" >> {\n\n    \"fcb.getNextMatch(currentSeason) \" >> {\n\n      val league = League(\"bl1\")\n\n      val fcb = Team(40)\n\n      val nextMatch = fcb.nextMatch(league.currentSeason)\n\n      nextMatch.isDefined must beTrue\n\n      nextMatch.get.id must beGreaterThanOrEqualTo(3000l)\n\n    }\n\n    \"fcb.getLastMatch(currentSeason) \" >> {\n\n      val league = League(\"bl1\")\n\n      val fcb = Team(40)\n\n      val nextMatch = fcb.lastMatch(league.currentSeason)\n\n      if (nextMatch.isDefined) {\n        nextMatch.isDefined must beTrue\n\n        nextMatch.get.id must beGreaterThanOrEqualTo(3000l)\n\n      } else {\n        league.currentMatchGroup.matchGroupOrderNumber must beEqualTo(34)\n      }\n\n    }\n\n    \"getLastMatchesVs for FC Bayern vs. BVB\" >> {\n\n      val fcb = Team(40)\n\n      val bvb = Team(7)\n\n      val matches = fcb.lastMatchesVs(bvb)\n\n      matches.size must beGreaterThan(50)\n    }\n  }\n\n\n}","title":"Team"}]}